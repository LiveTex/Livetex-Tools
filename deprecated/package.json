{
  "name": "livetex-tools",
  "version": "0.2.15",
  "repository": {
    "type": "git",
    "url": "https://github.com/LiveTex/Livetex-Tools"
  },
  "readme": "# Livetex-Tools\n\nBuild system from LiveTex.\n\n#### Install via npm:\n    npm install livetex-tools\n\n\n## Principles: \n\nBuild system works with artifacts by means of Make.\n\nProject should contain in its root directory a folder **etc/build** with following structure:\n\n    | etc\n    `----build  \n    |    |----templates  \n    |    |    |----js  \n    |    |    |    `----*.jst  \n    |    |    `----css  \n    |    |         `----*.csst  \n    |    `----sources-lists  \n    |         |----js  \n    |         |    `----*.jsd  \n    |         `----css  \n    |              `----*.csst  \n    ` Makefile  \n    \n+ **Templates:** *.jst, *.csst  \n    ```\n    TAG     : %%COMMAND%%    \n    COMMAND : any command which can be executed via teminal or make command  \n              contained in Makefile  \n    !note   : it is preferably to use -s flag with make \n    ```\n\n+ **Sources lists:** *.jsd, *.cssd  \nLists of files that can be used as prerequisites for targets in make  \n\n+ **Makefile:**  \nMain file, which includes rules:  \n    \n    ```\n    include node_modules/livetex-tools/rules/web.mk     for web-projects  \n    include node_modules/livetex-tools/rules/cpp.mk     for cpp-projects  \n    include node_modules/livetex-tools/rules/js.mk      default rules which have  \n                                                        to be included the last  \n    ```\n\n## Rules: \n\n+ **For templates**:     \ncan be used as COMMAND in TAG   \n\n    ```\n    syntax: %.extension-prefix\n            %         - name of sources list\n            extension - js or css\n            prefix    - name of action\n    ```\n    \n**js**: js.mk    \n\n    %.js-compile                    :   glues all js files mentioned in sources list  \n                                        into single stream and inserts it instead of TAG\n                                        \n    %.js-compile-compressed         :   compiles and compresses all js files mentioned  \n                                        in sources list by means of google-closure-compiler  \n                      !note         :   code shouldn dependend on any library\n                                        \n    %.js-externs-compile-compressed :   compiles and compresses all js files mentioned \n                                        in sources list by means of google-closure-compiler   \n                                        with externs taken from ./externs folder   \n                                        of each dependency (node_modules)\n    \n**css**: css.mk  \n\n    %.css-compile                   :   compiles all css files mentioned in sources list   \n                                        into single stream and inserts it instead of TAG\n\n+ **General**:  \ncan be used as script in NPM  \n\n**js**: js.mk  \n    \n    js          : general rule for js  \n    js-lint     : checks with google-closure-linter code style of sources  \n                  mentioned in sources lists   \n      !note     : if you have restrictions for this operation you can list  \n                  only necessary sources lists  \n                  at JS_LINT variable in Makefile\n    js-check    : checks syntax with google-closure-compiler     \n    js-externs  : extracts externs from built files   \n         !note  : if you have restrictions for this operation you can list  \n                  only necessary built files  \n                  at JS_EXTERNS variable in Makefile\n    js-build    : assembles js templates  \n    js-clean    : removes built files and externs  \n    publish     : increments patch version, publishes to NPM and pushes tag into GIT  \n    \n**css**: web.mk     \n    \n    css         : general rule for css  \n    css-build   : assembles css templates  \n    css-clean   : removes built files  \n    \n**cpp**: cpp.mk   \n    \n    cpp         : general rule for cpp  \n    cpp-build   : moves files built by means of node-gyp into built path and  \n                  removes all node-gyp extra data  \n    cpp-clean   : removes built files  \n    !note       : cpp rules have to be used after node-gyp build/rebuild commands  \n    \n    \n## License\n\nModified BSD License\n",
  "readmeFilename": "README.md",
  "description": "Build system from LiveTex.",
  "bugs": {
    "url": "https://github.com/LiveTex/Livetex-Tools/issues"
  },
  "_id": "livetex-tools@0.2.11",
  "_from": "livetex-tools@"
}
